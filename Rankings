class Environment:
    MAX_SCORE = 30

    def __init__(self, ghg_emissions, energy_consumption, renewable_generation):
        self.ghg_emissions = ghg_emissions
        self.energy_consumption = energy_consumption
        self.renewable_generation = renewable_generation

    def calculate_score(self):
        emission_score = max(0, 10 - self.ghg_emissions)
        energy_score = max(0, 10 - (self.energy_consumption / 10000))
        renewable_score = min(self.renewable_generation * 2, 10)
        return emission_score + energy_score + renewable_score


class Social:
    MAX_SCORE = 30

    def __init__(self, training_hours, csr_spend, ltifr):
        self.training_hours = training_hours
        self.csr_spend = csr_spend
        self.ltifr = ltifr

    def calculate_score(self):
        training_score = min(self.training_hours / 10, 10)
        csr_score = min(self.csr_spend / 10, 10)
        safety_score = max(0, 10 - self.ltifr * 10)
        return training_score + csr_score + safety_score


class Governance:
    MAX_SCORE = 30

    def __init__(self, revenue, profit, grievances_reported):
        self.revenue = revenue
        self.profit = profit
        self.grievances_reported = grievances_reported

    def calculate_score(self):
        revenue_score = min(self.revenue / 10000, 10)
        profit_score = min(self.profit / 1000, 10)
        grievance_score = max(0, 10 - self.grievances_reported * 0.1)
        return revenue_score + profit_score + grievance_score


class Company:
    def __init__(self, name, environment, social, governance):
        self.name = name
        self.environment = environment
        self.social = social
        self.governance = governance

    def calculate_esg_score(self):
        total_score = (
            self.environment.calculate_score() +
            self.social.calculate_score() +
            self.governance.calculate_score()
        )
        max_score = (
            Environment.MAX_SCORE +
            Social.MAX_SCORE +
            Governance.MAX_SCORE
        )
        return (total_score / max_score) * 100


companies = [
    Company("TCS",
            Environment(0.2643, 273543.33, 0.6),
            Social(80.86, 728, 0.24),
            Governance(709570, 377713.3, 0)),

    Company("Wipro",
            Environment(0.505, 700965.79, 0.766),
            Social(45.86, 229.4, 228894),
            Governance(772679.33, 127305, 478)),

    Company("Reliance Industries",
            Environment(223.66, 496070000, 0.19),
            Social(19.4, 1082.33, 0.063),
            Governance(1988228, 370514, 17)),

    Company("Ernst & Young",
            Environment(1.11, 1150, 5.53),
            Social(32, 336.6, 0.7),
            Governance(4143.28, 33753.3, 850)),

    Company("Vodafone Idea",
            Environment(10.55, 25590, 0.25),
            Social(8.1, 153, 0.36),
            Governance(43478.37, -34604.66, 166070))
]


companies.sort(key=lambda c: c.calculate_esg_score(), reverse=True)


print("Company Rankings based on ESG Score:")
for idx, company in enumerate(companies, start=1):
    print(f"{idx}. {company.name} - ESG Score: {company.calculate_esg_score():.2f}")

