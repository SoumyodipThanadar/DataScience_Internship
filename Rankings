import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

class Company {
    private String name;
    private Environment environment;
    private Social social;
    private Governance governance;

    public Company(String name, Environment environment, Social social, Governance governance) {
        this.name = name;
        this.environment = environment;
        this.social = social;
        this.governance = governance;
    }

    public double calculateESGScore() {
        double totalScore = environment.calculateScore() + social.calculateScore() + governance.calculateScore();
        double maxScore = Environment.MAX_SCORE + Social.MAX_SCORE + Governance.MAX_SCORE;
        return (totalScore / maxScore) * 100;  
    }

    public String getName() {
        return name;
    }
}

class Environment {
    private double ghgEmissions;    
    private double energyConsumption;
    private double renewableGeneration;
    public static final double MAX_SCORE = 30;

    public Environment(double ghgEmissions, double energyConsumption, double renewableGeneration) {
        this.ghgEmissions = ghgEmissions;
        this.energyConsumption = energyConsumption;
        this.renewableGeneration = renewableGeneration;
    }

    public double calculateScore() {
        double emissionScore = Math.max(0, 10 - ghgEmissions);  
        double energyScore = Math.max(0, 10 - (energyConsumption / 10000));  
        double renewableScore = Math.min(renewableGeneration * 2, 10);  
        return emissionScore + energyScore + renewableScore;
    }
}

class Social {
    private double trainingHours;  
    private double csrSpend;        
    private double ltifr;          
    public static final double MAX_SCORE = 30;

    public Social(double trainingHours, double csrSpend, double ltifr) {
        this.trainingHours = trainingHours;
        this.csrSpend = csrSpend;
        this.ltifr = ltifr;
    }

    public double calculateScore() {
        double trainingScore = Math.min(trainingHours / 10, 10);  
        double csrScore = Math.min(csrSpend / 10, 10);  
        double safetyScore = Math.max(0, 10 - ltifr * 10);  
        return trainingScore + csrScore + safetyScore;
    }
}

class Governance {
    private double revenue;          
    private double profit;          
    private int grievancesReported;  
    public static final double MAX_SCORE = 30;

    public Governance(double revenue, double profit, int grievancesReported) {
        this.revenue = revenue;
        this.profit = profit;
        this.grievancesReported = grievancesReported;
    }

    public double calculateScore() {
        double revenueScore = Math.min(revenue / 10000, 10);  
        double profitScore = Math.min(profit / 1000, 10);  
        double grievanceScore = Math.max(0, 10 - grievancesReported * 0.1);  
        return revenueScore + profitScore + grievanceScore;
    }
}

public class ESGRanking {
    public static void main(String[] args) {
        List<Company> companies = new ArrayList<>();

       
        companies.add(new Company("TCS",
                new Environment(0.2643, 273543.33, 0.6),
                new Social(80.86, 728, 0.24),
                new Governance(709570, 377713.3, 0)));
       
        companies.add(new Company("Wipro",
                new Environment(0.505, 700965.79, 0.766),
                new Social(45.86, 229.4, 228894),
                new Governance(772679.33, 127305, 478)));

        companies.add(new Company("Reliance Industries",
                new Environment(223.66, 496070000, 0.19),
                new Social(19.4, 1082.33, 0.063),
                new Governance(1988228, 370514, 17)));

        companies.add(new Company("Ernst & Young",
                new Environment(1.11, 1150, 5.53),
                new Social(32, 336.6, 0.7),
                new Governance(4143.28, 33753.3, 850)));

        companies.add(new Company("Vodafone Idea",
                new Environment(10.55, 25590, 0.25),
                new Social(8.1, 153, 0.36),
                new Governance(43478.37, -34604.66, 166070)));

       
        companies.sort(Comparator.comparingDouble(Company::calculateESGScore).reversed());

       
        System.out.println("Company Rankings based on ESG Score:");
        for (int i = 0; i < companies.size(); i++) {
            System.out.printf("%d. %s - ESG Score: %.2f\n", i + 1, companies.get(i).getName(), companies.get(i).calculateESGScore());
        }
    }
}
